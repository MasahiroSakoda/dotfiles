# -*-mode:fish-*- vim:ft=fish.gotexttmpl

# Language/Locale Configuration
set -x LANG ja_JP.UTF-8
set -x LC_CTYPE ja_JP.UTF-8

# prevent layout collapsing in CLI tool
set -gx RUNEWIDTH_EASTASIAN 0

# Path Configuration
fish_add_path {{ .brew_prefix }}/bin
fish_add_path {{ .brew_prefix }}/sbin
fish_add_path $HOME/.local/bin
fish_add_path $XDG_DATA_HOME/nvim/mason/bin

{{- if eq .chezmoi.arch "arm64" }}
set -gx ARCHFLAGS '-arch arm64'
{{- else if eq .chezmoi.arch "amd64" }}
set -gx ARCHFLAGS '-arch x86_64'
{{- end }}

# Editor
set -gx EDITOR nvim
set -gx VISUAL $EDITOR
set -gx NVIM_APPNAME nvim

# w3m
set -gx W3M_DIR "$XDG_CONFIG_HOME/w3m"

# Pager
set -gx PAGER "less"
set -gx MANPAGER "sh -c 'col -bx | bat -l man -p --style=numbers'"
set -gx BAT_THEME "Monokai Extended Origin"
set -gx LESS "--ignore-case --RAW-CONTROL-CHARS --LONG-PROMPT -x-4 -z-4"
set -gx LESSCHARSET "utf-8"
set -gx LESS_TERMCAP_mb (printf "\e[01;31m")
set -gx LESS_TERMCAP_md (printf "\e[01;31m")
set -gx LESS_TERMCAP_me (printf "\e[0m")
set -gx LESS_TERMCAP_se (printf "\e[0m")
set -gx LESS_TERMCAP_so (printf "\e[01;42;30m")    # Search highlight
set -gx LESS_TERMCAP_ue (printf "\e[0m")
set -gx LESS_TERMCAP_us (printf "\e[01;32m")
set -gx LESSHISTFILE "$XDG_DATA_HOME/lesshst"

# Grep
set -x GREP_OPTIONS "--color=always"

# Fish Plugin
## Done notification
set -x __done_min_cmd_duration 60000  # default: 5000 ms

# Keybinds
bind ctrl-alt-h backward-kill-word

# Fish abbreviations
abbr -a -- cl "clear"
abbr -a -- x  "exit"

## File
abbr -a -- o    "open"
abbr -a -- oa   "open -a"
abbr -a -- mv   "mv -iv"
abbr -a -- cp   "cp -iv"
abbr -a -- cpr  "cp -R"
abbr -a -- rm   "rm -iv"
abbr -a -- rmf  "rm -if"
abbr -a -- rmrf "rm -rf"

## Directory
abbr -a -- cwd   "pwd | {{ .cmd.copy }}"
abbr -a -- mkdir "mkdir -pv"

abbr -a -- ..   "cd .."
abbr -a -- ...  "cd ../.."
abbr -a -- .... "cd ../../.."
abbr -a -- .2 "cd ../../"
abbr -a -- .3 "cd ../../../"
abbr -a -- .4 "cd ../../../../"
abbr -a -- .5 "cd ../../../../../"

## Permission
abbr -a -- co  "chown -v"
abbr -a -- cmx "chmod +x"
abbr -a -- cmr "chmod -R"

## Git
abbr -a -- g  "git"
abbr -a -- lg "lazygit"

abbr -a -- gs  "git status"
abbr -a -- gss "git status --short"
abbr -a -- gsb "git status --short --branch"
abbr -a -- gl  "git log --graph --all"
abbr -a -- gd  "git diff"

abbr -a -- ga  "git add --verbose"
abbr -a -- gaa "git add --verbose --all"
abbr -a -- grm "git rm"
abbr -a -- gmv "git mv --verbose"
abbr -a -- gm  "git merge --verbose"
abbr -a -- gma "git merge --abort"
abbr -a -- gms "git merge --squash"

abbr -a -- gcp  "git cherry-pick"
abbr -a -- gcpe "git cherry-pick -e"
abbr -a -- gcpn "git cherry-pick -n"
abbr -a -- gcpa "git cherry-pick --abort"
abbr -a -- gcpc "git cherry-pick --continue"

abbr -a -- gb   "git branch --all"
abbr -a -- gbd  "git branch -d"
abbr -a -- gco  "git checkout"
abbr -a -- gcob "git checkout -b"
abbr -a -- gcoo "git checkout --ours"
abbr -a -- gcot "git checkout --theirs"

abbr -a -- gcl "git clone"
abbr -a -- gf  "git fetch origin"

abbr -a -- gpl  "git pull origin"
abbr -a -- gplu "git pull upstream"
abbr -a -- gplr "git pull --rebase"

abbr -a -- gpr  "git pull-request"
abbr -a -- gprd "git pull-request -d"
abbr -a -- gprp "git pull-request -p"

abbr -a -- gps  "git push origin"
abbr -a -- gpsu "git push upstream"
abbr -a -- gpsd "git push --dry-run"

abbr -a -- grb  "git rebase"
abbr -a -- grba "git rebase --abort"
abbr -a -- grbc "git rebase --continue"
abbr -a -- grbi "git rebase --interactive"
abbr -a -- grbs "git rebase --skip"

abbr -a -- gt  "git tag -a"
abbr -a -- gts "git tag --sign"

## Docker
abbr -a -- d docker
abbr -a -- dps "docker ps"
abbr -a -- dk  "docker kill"
abbr -a -- dp  "docker pull"
abbr -a -- dP  "docker push"
abbr -a -- dr  "docker run --rm"

### docker compose
abbr -a -- dc  "docker compose"
abbr -a -- dcb "docker compose build"
abbr -a -- dcu "docker compose up --build -d"
abbr -a -- dcd "docker compose down"
abbr -a -- dcl "docker compose logs"
abbr -a -- dcr "docker compose run --rm"
abbr -a -- dce "docker compose exec"
abbr -a -- dcs "docker compose stop"

# Taskfile
abbr -a -- tb "task build"
abbr -a -- tr "task run"
abbr -a -- tc "task clean"
abbr -a -- tl "task lint"
abbr -a -- tt "task test"
abbr -a -- th "task help"

# Zellij
abbr -a -- zld "zellij-default"
abbr -a -- zlc "zellij-coding"
abbr -a -- zlj "zellij-jsdev"
abbr -a -- zlm "zellij-monitor"
abbr -a -- zls "zellij-session"
abbr -a -- zll "zellij-layout"

{{ if eq .chezmoi.os "darwin" }}
set -gx POCKET_CONSUMER_KEY   (security find-generic-password -s "Pocket Consumer Key" -w)
set -gx POCKET_ACCESS_TOKEN   (security find-generic-password -s "Pocket Access Token" -w)
set -gx OPENAI_API_KEY        (security find-generic-password -s "OpenAI API Key" -w)
set -gx GOOGLE_API_KEY        (security find-generic-password -s "Google API Key" -w)
set -gx GEMINI_API_KEY        (security find-generic-password -s "Gemini API Key" -w)
set -gx AZURE_OPENAPI_API_KEY (security find-generic-password -s "Azure API Key" -w)
set -gx GROQ_API_KEY          (security find-generic-password -s "Groq API Key" -w)
set -gx DEEPL_API_KEY         (security find-generic-password -s "DeepL API Key" -w)
{{ else if eq .chezmoi.os "linux" }}
set -gx OPENAI_API_KEY        (secret-tool lookup username $USER key_name "OpenAI API Key")
set -gx GOOGLE_API_KEY        (secret-tool lookup username $USER key_name "Google API Key")
set -gx GEMINI_API_KEY        (secret-tool lookup username $USER key_name "Gemini API Key")
set -gx AZURE_OPENAPI_API_KEY (secret-tool lookup username $USER key_name "Azure API Key")
set -gx GROQ_API_KEY          (secret-tool lookup username $USER key_name "Groq API Key")
set -gx DEEPL_API_KEY         (secret-tool lookup username $USER key_name "DeepL API Key")
{{ end }}
