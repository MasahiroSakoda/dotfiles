# -*-mode:toml-*- vim:ft=toml
# Language config: https://docs.helix-editor.com/languages.html

{{- $binPath  := joinPath .chezmoi.homeDir ".local" "share" "nvim" "mason" "bin" }}
{{- $denoPath := joinPath (env "MISE_DATA_DIR") "installs" "deno" "1" "bin" "deno" }}

##################################################
# Language Servers:
# https://github.com/helix-editor/helix/wiki/Language-Server-Configurations
##################################################

[language-server.ruff-lsp]
command = "ruff-lsp"
config  = { settings = { run = "onSave" } }

[language-server.ruby-lsp]
command = "ruby-lsp"

[language-server.rubocop]
command = "rubocop"

[language-server.lua-ls]
command = "lua-language-server"
config.Lua.hint.enable     = true
config.Lua.hint.arrayIndex = "Enable"
config.Lua.hint.setType    = true
config.Lua.hint.paramName  = "All"
config.Lua.hint.paramType  = true
config.Lua.hint.await      = true

[language-server.sql-language-server]
command = "sql-language-server"
args    = [ "up", "--method", "stdio" ]

[language-server.docker-langserver]
command = "docker-langserver"
args    = [ "--stdio" ]

[language-server.harolint]
command = "hadolint"

[language-server.marksman]
command = "marksman"
args    = [ "--stdio" ]

[language-server.markdownlint]
command = "markdownlint"
args    = []

[language-server.html-language-server]
command = "vscode-html-language-server"
args    = [ "--stdio" ]
config.provideFormatter = true
config.autoClosingTags  = true
config.css = true
config.javascript = true
config.format.endWithNewline = true
config.format.templating = true
config.format.indentHandlebars = true
config.format.indentScripts = "separate"

[language-server.css-language-server]
command = "vscode-css-language-server"
args    = [ "--stdio" ]
config.provideFormatter     = true
config.css.validate.enable  = true
config.scss.validate.enable = true
config.less.validate.enable = true

[language-server.json-language-server]
command = "vscode-json-language-server"
args    = [ "--stdio" ]
config.provideFormatter     = true
config.json.validate.enable = true

[[language-server.json-language-server.config.json.schemas]]
fileMatch = [ "tsconfig.json", "tsconfig.*.json" ]
url = "https://json.schemastore.org/tsconfig.json"

[[language-server.json-language-server.config.json.schemas]]
fileMatch = [ "package.json" ]
url = "https://json.schemastore.org/package.json"

[[language-server.json-language-server.config.json.schemas]]
fileMatch = [ "vercel.json" ]
url = "https://openapi.vercel.sh/vercel.json"

[language-server.yaml-language-server]
command = "yaml-language-server"
args    = [ "--stdio" ]
config.validate   = true
config.hover      = true
config.completion = true
config.format.enable         = true
config.format.singleQuote    = false
config.format.bracketSpacing = true
config.format.proseWrap  = true
config.format.printWidth = 80

[language-server.yaml-language-server.config.yaml.schemas]
"https://json.schemastore.org/github-workflow.json" = ".github/workflows/*.{yml,yaml}"
"https://json.schemastore.org/dependabot-v2"        = ".github/dependabot.{ymlyaml}"
kubernetes = 'k8s/*.yaml'

[language-server.taplo-lsp]
command = "taplo"
args    = [ "lsp", "stdio" ]

[language-server.taplo-lsp.config]
debug = false
taploConfig = 'taplo://taplo.toml'
taploConfigEnabled = true
activationStatus = true
semanticTokens = false

[language-server.taplo-lsp.config.evenBetterToml.schema]
enabled = true
links   = false
repositoryEnabled = true
repositoryUrl     = "https://taplo.tamasfe.dev/schema_index.json"

[language-server.taplo-lsp.config.evenBetterToml.schema.associations]
'^(.*(/|\\)Cargo\.toml|Cargo\.toml)$' = "taplo://Cargo.toml"

[language-server.taplo-lsp.config.evenBetterToml.formatter]
alignEntries  = false
alignComments = true
arrayTrailingComma = true
arrayAutoExpand     = true
arrayAutoCollapse   = true
compactArrays       = true
compactInlineTables = false
compactEntries      = false
columnWidth   = 80
indentTables  = false
indentEntries = false
indentString  = {}
reorderKeys   = true
allowedBlankLines = 2
trailingNewline   = true
crlf = false

[language-server.taplo-lsp.config.evenBetterToml.actions]
ignoreDepracatedAssociations = false

[language-server.bash-language-server]
command = "bash-language-server"
args    = [ "start" ]

[language-server.clangd]
command = "clangd"

[language-server.cmake-language-server]
command = "cmake-language-server"

[language-server.rust-analyzer]
command = "rust-analyzer"

[language-server.gopls]
command = "gopls"
args    = [ "serve" ]
config.hints.assignVariableTypes    = true
config.hints.compositeLiteralFields = true
config.hints.constantValues         = true
config.hints.functionTypeParameters = true
config.hints.parameterNames         = true
config.hints.rangeVariableTypes     = true

[language-server.golangci-lint-lsp.config]
command = "gopls"
args = [
  "run",
  "--disable", "typecheck",
  "--enable", "bodyclose",
  "--enable", "decorder",
  "--enable", "dupl",
  "--enable", "funlen",
  "--enable", "godox",
  "--enable", "gosec",
  "--enable", "ireturn",
  "--enable", "maintidx",
  "--enable", "sqlclosecheck",
  "--enable", "wastedassign",
  "--enable", "wrapcheck",
  "--out-format", "json",
  "--issues-exit-code=1",
]

[language-server.tsserver]
command = "typescript-language-server"
args    = [ "--stdio" ]

[language-server.biome-lsp]
command = "biome"
args    = [ "lsp-proxy" ]

[language-server.pyright-langserver]
command = "pyright-langserver"
args    = [ "--stdio" ]

[language-server.pyright-langserver.config.python.analysis]
autoImportCompletions = true
autoSearchPaths = true
reportMissingImports = true
typeCheckingMode = "strict"
useLibraryCodeForTypes = true

##################################################
# Languages
##################################################

# Shell
[[language]]
name  = "bash"
scope = "source.bash"
injection-regex = "(shell|bash|zsh|sh)"
file-types = [
  "sh", "bash", "zsh",
  ".bash_login", ".bash_logout", ".bash_profile", ".bashrc", ".bash_aliases", ".profile",
  ".zshenv", ".zlogin", ".zlogout", ".zprofile", ".zshrc",
  "APKBUILD", "PKGBUILD", "eclass", "ebuild", "bazelrc",
]
shebangs = [ "sh", "bash", "dash", "zsh" ]
indent = { tab-width = 2, unit = "  " }
language-servers = [ "bash-language-server" ]
formatter        = { command = "shfmt", args = [ "-i", "2", "-ci" ]} # Google's Style

[[language]]
name  = "fish"
scope = "source.fish"
injection-regex = "fish"
file-types      = [ "fish" ]
shebangs = [ "fish" ]
indent = { tab-width = 2, unit = "  " }

# Build tools
[[language]]
name  = "make"
scope = "source.make"
injection-regex = "(make|makefile|Makefile|mk|just)"
file-types      = [ "Makefile", "makefile", "mk", "justfile", ".justfile" ]
indent = { tab-width = 4, unit = "\t" }

[[language]]
name  = "cmake"
scope = "source.cmake"
injection-regex = "cmake"
file-types      = [ "cmake", "CMakeLists.txt" ]
indent = { tab-width = 2, unit = "  " }
language-servers = [ "cmake-language-server" ]

# Compile Languages
[[language]]
name  = "c"
scope = "source.c"
injection-regex = "c"
file-types      = [ "c", "h" ]
language-servers = [ "clangd" ]

[[language]]
name  = "cpp"
scope = "source.cpp"
injection-regex = "cpp"
file-types      = [
  "cc", "hh", "c++",
  "cpp", "hpp", "h", "ipp", "tpp",
  "cxx", "hxx", "ixx", "txx", "ino",
]
language-servers = [ "clangd" ]

[[language]]
name  = "rust"
scope = "source.rust"
injection-regex = "rust"
file-types      = [ "rs" ]
roots = [ "Cargo.toml", "Cargo.lock" ]
auto-format = true
indent = { tab-width = 4, unit = "    " }
language-servers = [ "rust-analyzer" ]

{{- if .mise.go.enabled }}
[[language]]
name  = "go"
scope = "source.go"
injection-regex = "go"
file-types      = [ "go" ]
roots = [ "Gopkg.toml", "go.mod" ]
auto-format = true
indent = { tab-width = 4, unit = "\t" }
formatter = { command = "goimports" }
language-servers = [ "gopls", "golangci-lint-lsp" ]

[[language]]
name  = "gomod"
scope = "source.gomod"
injection-regex = "gomod"
file-types = [ "go.mod" ]
auto-format = true
language-servers = [ "gopls", "golangci-lint-lsp" ]

[[language]]
name  = "gotmpl"
scope = "source.gotmpl"
injection-regex = "gotmpl"
file-types      = [ "gotmpl" ]
auto-format = true
language-servers = [ "gopls", "golangci-lint-lsp" ]

[[language]]
name  = "gowork"
scope = "source.gowork"
injection-regex = "gowork"
file-types      = [ "go.work" ]
auto-format = true
language-servers = [ "gopls", "golangci-lint-lsp" ]

{{- end }}

# Script Languages
{{- if .mise.node.enabled }}
[[language]]
name  = "javascript.node"
scope = "source.js"
injection-regex = "(cjs|commonjs|nodejs)"
file-types      = [ "cjs" ]
shebangs = [ "node" ]
roots = [ "package.json" ]
indent = { tab-width = 2, unit = "  " }
language-servers = [ "tsserver" , "biome-lsp" ]

[[language]]
name  = "typescript.node"
scope = "source.ts"
injection-regex = "cts"
file-types      = [ "ts" ]
shebangs = [ "node" ]
roots = [ "package.json" ]
indent = { tab-width = 2, unit = "  " }
language-servers = [ "tsserver", "biome-lsp" ]

[[language]]
name  = "jsx"
scope = "source.jsx"
injection-regex = "jsx"
file-types      = [ "jsx" ]
shebangs = [ "node" ]
roots = [ "package.json" ]
indent = { tab-width = 2, unit = "  " }
formatter = { command = "biome", args = [ "format", "--indent-style", "space", "--stdin-file-path", "file.jsx" ] }
auto-format = true
language-servers = [ "tsserver", "biome-lsp" ]

[[language]]
name  = "tsx"
scope = "source.tsx"
injection-regex = "tsx"
file-types      = [ "tsx" ]
shebangs = [ "node" ]
roots = [ "package.json" ]
indent = { tab-width = 2, unit = "  " }
formatter = { command = "biome", args = [ "format", "--indent-style", "space", "--stdin-file-path", "file.tsx" ] }
auto-format = true
language-servers = [ "tsserver", "biome-lsp" ]
{{- end }}

{{- if .mise.deno.enabled }}
[[language]]
name = "javascript"
scope = "source.js"
injection-regex = "^(js|javascript)$"
file-types = [ "js", "jsx", "mjs" ]
shebangs = [ "deno", "node" ]
roots    = [ "deno.json", "deno.jsonc", "package.json", "tsconfig.json" ]
config = { enable = true, lint = true, unstable = true }
language-server = { command = "deno", args = ["lsp"], language-id = "javascript" }
auto-format = true

[[language]]
name  = "typescript"
scope = "source.ts"
injection-regex = "^(ts|typescript)$"
file-types = [ "ts" ]
shebangs = [ "deno", "node" ]
roots    = [ "deno.json", "deno.jsonc", "package.json", "tsconfig.json" ]
config = { enable = true, lint = true, unstable = true }
language-server = { command = "deno", args = ["lsp"], language-id = "typescript" }
auto-format = true

[[language]]
name  = "jsx"
scope = "source.jsx"
injection-regex = "jsx"
file-types = [ "jsx" ]
shebangs = [ "deno", "node" ]
roots    = [ "deno.json", "deno.jsonc", "package.json", "tsconfig.json" ]
config = { enable = true, lint = true, unstable = true }
language-server = { command = "deno", args = ["lsp"], language-id = "javascriptreact" }
auto-format = true

[[language]]
name  = "tsx"
scope = "source.ts"
injection-regex = "^(tsx)$"
file-types = [ "tsx" ]
shebangs = [ "deno", "node" ]
roots    = [ "deno.json", "deno.jsonc", "package.json", "tsconfig.json" ]
config = { enable = true, lint = true, unstable = true }
language-server = { command = "deno", args = ["lsp"], language-id = "typescriptreact" }
auto-format = true

{{- end }}

# Markup Languages
{{- if .mise.python.enabled }}
[[language]]
name = "python"
scope = "source.python"
injection-regex = "python"
file-types = [ "py" ]
shebangs = [ "python" ]
roots = [ "pyproject.toml" ]
indent = { tab-width = 4, unit = "    " }
language-servers = [ "pyright-langserver", "ruff-lsp" ]

{{- end }}

{{- if .mise.ruby.enabled }}
[[language]]
name  = "ruby"
scope = "source.ruby"
injection-regex = "ruby"
file-types = [ "rb", "rake", "rakefile", "irb", "gemfile", "gemspec", "Rakefile", "Gemfile", "rabl", "jbuilder", "jb" ]
roots = [ "Gemfile" ]
indent = { tab-width = 2, unit = "  " }
language-servers = [ "ruby-lsp", "rubocop" ]

{{- end }}

[[language]]
name  = "lua"
scope = "source.lua"
shebangs = [ "lua" ]
file-types = [ "lua" ]
roots    = [ ".luarc.json", ".luacheckrc", ".stylua.toml", "selene.toml", ".git" ]
indent = { tab-width = 2, unit = "  " }
language-servers = [ "lua-ls"]

[[language]]
name  = "sql"
scope = "source.sql"
injection-regex = "sql"
file-types      = [ "sql" ]
indent = { tab-width = 4, unit = "    " }
language-servers = [ "sql-language-server" ]

[[language]]
name  = "dockerfile"
scope = "source.dockerfile"
injection-regex = "docker|dockerfile"
file-types      = [ "Dockerfile", "dockerfile" ]
indent = { tab-width = 2, unit = "  " }
language-servers = [ "docker-langserver", "hadolint" ]

[[language]]
name = "docker-compose"
language-servers = [ "docker-compose-langserver", "yaml-language-server", "buffer-ls" ]

[[language]]
name  = "markdown"
scope = "source.md"
injection-regex = "md|markdown"
file-types      = [ "markdown", "md" ]
indent = { tab-width = 2, unit = "  " }
language-servers = [ "marksman", "markdownlint" ]

[[language]]
name  = "markdown.inline"
scope = "source.markdown.inline"
injection-regex = "markdown\\.inline"

[[language]]
name  = "html"
scope = "text.html.basic"
injection-regex = "html"
file-types = [ "html" ]
indent = { tab-width = 2, unit = "  " }
language-servers = [ "html-language-server" ]

[[language]]
name  = "css"
scope = "source.css"
injection-regex = "css"
file-types = [ "css", "scss" ]
indent = { tab-width = 2, unit = "  " }
language-servers = [ "css-language-server" ]
auto-format = true

[[language]]
name  = "scss"
scope = "source.scss"
injection-regex = "scss"
file-types      = [ "scss" ]
indent = { tab-width = 2, unit = "  " }
language-servers = [ "css-language-server" ]
auto-format = true

[[language]]
name  = "xml"
scope = "source.xml"
injection-regex = "xml|svg|xsd|xslt|xsl"
file-types      = [ "xml", "svg", "xsd", "xslt", "xsl" ]
auto-format = true
indent = { tab-width = 2, unit = "  " }

[[language]]
name  = "json"
scope = "source.json"
injection-regex = "json"
file-types      = [ "json", "jsonc", "json5" ]
indent = { tab-width = 2, unit = "  " }
formatter = { command = "biome", args = [ "format", "--indent-style", "space", "--stdin-file-path", "file.json" ] }
auto-format = true
language-servers = [ "json-language-server", "biome-lsp" ]

[[language]]
name  = "kdl"
scope = "source.kdl"
injection-regex = "kdl"
file-types      = [ "kdl" ]

[[language]]
name  = "yaml"
scope = "source.yaml"
injection-regex = "yml|yaml"
file-types      = [ "yaml", "yml" ]
indent = { tab-width = 2, unit = "  " }
language-servers = [ "yaml-language-server" ]

[[language]]
name  = "toml"
scope = "source.toml"
injection-regex = "toml"
file-types      = [ "toml" ]
language-servers = [ "taplo-lsp" ]

# Git
[[language]]
name  = "git-config"
scope = "source.gitconfig"
injection-regex = "git-config"
file-types = [
  ".gitmodules",
  ".gitconfig",
  { glob = ".git/config" },
  { glob = ".config/git/config" },
]
indent = { tab-width = 4, unit = "\t" }

[[language]]
name  = "git-attributes"
scope = "source.gitattributes"
injection-regex = "git-attributes"
file-types      = [ ".gitattributes" ]

[[language]]
name  = "git-ignore"
scope = "source.gitignore"
injection-regex = "git-ignore"
file-types      = [ ".gitignore", ".gitignore_global" ]

[[language]]
name  = "git-commit"
scope = "git.commitmsg"
file-types = [ "COMMIT_EDITMSG" ]
indent = { tab-width = 2, unit = "  " }
rulers = [ 50, 72 ]
text-width = 72

[[language]]
name  = "git-rebase"
scope = "source.gitrebase"
injection-regex = "git-rebase"
file-types      = [ "git-rebase-todo" ]
indent = { tab-width = 2, unit = " " }

# Config
[[language]]
name  = "sshclientconfig"
scope = "source.sshclientconfig"
file-types = [
  { glob = ".ssh/config" },
  { glob = "/etc/ssh/ssh_config" },
]

[[language]]
name  = "diff"
scope = "source.diff"
injection-regex = "diff"
file-types      = [ "diff", "patch" ]
indent = { tab-width = 2, unit = "  " }

[[language]]
name  = "regex"
scope = "source.regex"
injection-regex = "regex"
file-types      = [ "regex" ]
