# -*-mode:nu-*- vim:ft=nu.gotexttmpl
# Nushell Environment Config File
#
# version = "0.100.0"

# Specifies how environment variables are:
# - converted from a string to a value on Nushell startup (from_string)
# - converted from a value back to a string when running external commands (to_string)
# Note: The conversions happen *after* config.nu is loaded
$env.ENV_CONVERSIONS = {
  "PATH": {
    from_string: { |s| $s | split row (char esep) | path expand --no-symlink }
    to_string:   { |v| $v | path expand --no-symlink | str join (char esep) }
  }
  "Path": {
    from_string: { |s| $s | split row (char esep) | path expand --no-symlink }
    to_string:   { |v| $v | path expand --no-symlink | str join (char esep) }
  }
}

# Directories to search for scripts when calling source or use
# The default for this is $nu.default-config-dir/scripts
$env.NU_LIB_DIRS = [
  ($nu.default-config-dir | path join "scripts")     # add <nushell-config-dir>/scripts
  ($nu.data-dir           | path join "completions") # default home for nushell completions
]

# Directories to search for plugin binaries when calling register
# The default for this is $nu.default-config-dir/plugins
$env.NU_PLUGIN_DIRS = [
  ($nu.default-config-dir | path join "plugins") # add <nushell-config-dir>/plugins
]

# To add entries to PATH (on Windows you might use Path), you can use the following pattern:
# $env.PATH = ($env.PATH | split row (char esep) | prepend '/some/path')
# An alternate way to add entries to $env.PATH is to use the custom command `path add`
# which is built into the nushell stdlib:
# use std "path add"
# $env.PATH = ($env.PATH | split row (char esep))
# path add /some/path
# path add ($env.CARGO_HOME | path join "bin")
# path add ($env.HOME | path join ".local" "bin")
# $env.PATH = ($env.PATH | uniq)

# To load from a custom file you can use:
# source ($nu.default-config-dir | path join 'custom.nu')

# Language / Locale
$env.LANG     = "ja_JP.UTF-8"
$env.LC_CTYPE = "ja_JP.UTF-8"
$env.RUNEWIDTH_EASTASIAN = 0

# Architecture
{{- if eq .chezmoi.arch "arm64" }}
$env.ARCHFLAGS = "-arch arm64"
{{- else if eq .chezmoi.arch "amd64" }}
$env.ARCHFLAGS = "-arch amd64"
{{- end }}

# XDG
$env.XDG_BIN_HOME    = ([$env.HOME, .local, bin   ] | path join)
$env.XDG_BIN_HOME    = ([$env.HOME, .local, bin   ] | path join)
$env.XDG_LIB_HOME    = ([$env.HOME, .local/lib   ] | path join)
$env.XDG_CONFIG_HOME = ([$env.HOME, .config      ] | path join )
$env.XDG_CACHE_HOME  = ([$env.HOME, .cache       ] | path join )
$env.XDG_DATA_HOME   = ([$env.HOME, .local/share ] | path join)
$env.XDG_STATE_HOME  = ([$env.HOME, .local/state ] | path join)

# Homebrew
$env.HOMEBREW_PREFIX    = {{ .brew_prefix | quote }}
$env.HOMEBREW_CELLAR    = ($env.HOMEBREW_PREFIX | path join "Cellar")
$env.HOMEBREW_CASK_OPTS = "--appdir=~/Applications"

# Starship: Shell Prompt
$env.STARSHIP_CONFIG = ($env.XDG_CONFIG_HOME | path join "starship" "starship.toml")
if ((which starship | is-not-empty) and not ("~/.cache/starship/init.nu" | path exists)) {
  mkdir ~/.cache/starship
  starship init nu | save -f ~/.cache/starship/init.nu
}

# tmux
$env.TMUX_HOME = ($env.XDG_CONFIG_HOME | path join "tmux")
$env.TMUX_PLUGIN_MANAGER_PATH = ([$env.XDG_DATA_HOME, tmux, plugins] | path join)

# Editor
$env.EDITOR = "nvim"
$env.VISUAL = $env.EDITOR
$env.NVIM_APP_NAME = "nvim"

# mise
$env.MISE_DEBUG       = 0
$env.MISE_LOG_LEVEL   = "info" # Usage: trace|debug|info|warn|error
$env.MISE_DATA_DIR    = ($env.XDG_DATA_HOME   | path join "mise")
$env.MISE_CONFIG_FILE = ($env.XDG_CONFIG_HOME | path join "mise" "config.toml")
$env.MISE_TRUSTED_CONFIG_PATHS = $env.MISE_CONFIG_FILE
$env.MISE_FETCH_REMOTE_VERSIONS_TIMEOUT = "1800 s"
if ((which mise | is-not-empty) and not ("~/.cache/mise/init.nu" | path exists)) {
  mkdir ~/.cache/mise
  mise activate nu | save -f ~/.cache/mise/init.nu
}

# Programming Language Environment
## Rust
$env.RUST_BACKTRACE = "full"
$env.RUSTUP_HOME    = ([$env.HOME, rustup ] | path join)
$env.CARGO_HOME     = ([$env.HOME, cargo  ] | path join)

## Go
$env.GOPATH = ($env.HOME   | path join "go")
$env.GOBIN  = ($env.GOPATH | path join "bin")

## Python
$env.PYTHON_HISTORY           = ($env.XDG_STATE_HOME | path join "python_history")
$env.PYTHON_BUILD_CACHE_PATH  = ($env.XDG_CACHE_HOME | path join "pyenv")
$env.PYTHON_BUILD_HTTP_CLIENT = "aria2c"
$env.PYTHONIOENCODING         = "utf-8"
$env.PYTHON_CFLAGS            = "-march=native -mtune=native"
$env.PYTHON_CONFIGURE_OPTS    = "$--enable-optimizations --with-lto=full"

## Ruby
$env.RUBY_CFLAGS         = "-Wno-error=implicit-function-declaration"
$env.RUBY_COFNIGURE_OPTS = [ "$--with-openssl-dir=(brew --prefix openssl@3) --with-readline-dir=(brew --prefix readline)" ]

## Node.js
$env.PROTO_ROOT  = ([$env.HOME, proto  ] | path join)
$env.VOLTA_HOME  = ([$env.HOME, volta  ] | path join)
$env.PNPM_HOME   = ([$env.XDG_DATA_HOME, pnpm ] | path join)

## SQLite
$env.SQLITE_HISTORY = ($env.XDG_STATE_HOME | path join "sqlite_history")

# PATH
$env.PATH = (
  $env.PATH | split row (char esep) |
  prepend ($env.HOMEBREW_PREFIX | path join "bin") |
  prepend ($env.HOMEBREW_PREFIX | path join "sbin") |
  prepend ($env.HOME            | path join ".local" "bin") |
  prepend ($env.XDG_DATA_HOME   | path join "nvim" "mason" "bin") |
  uniq
)

# CLI
## Pager
$env.PAGER        = "less"
$env.MANPAGER     = "sh -c 'col -bx | bat -l man -p --style=numbers'"
$env.BAT_THEME    = "Monokai Extended Origin"

### Less
$env.LESSHISTFILE = ($env.XDG_DATA_HOME | path join "lesshst")
$env.LESSCHARSET  = "utf-8"
$env.LESS_TERMCAP_mb = (ansi --escape "01;31m")
$env.LESS_TERMCAP_md = (ansi --escape "01;31m")
$env.LESS_TERMCAP_me = (ansi --escape "0m")
$env.LESS_TERMCAP_se = (ansi --escape "0m")
$env.LESS_TERMCAP_so = (ansi --escape "01;42;31m")
$env.LESS_TERMCAP_ue = (ansi --escape "0m")
$env.LESS_TERMCAP_us = (ansi --escape "01;32m")

## Fuzzy finder
$env.FZF_DEFAULT_COMMAND = "rg --files --hidden --glob '!.git/*' --glob '!cache/*' --glob '!node_modules/*'"
$env.FZF_DEFAULT_OPTS    = "--ansi --cycle --reverse --height 100% --margin=1,2 --padding 1 --border rounded --marker=' ' --prompt='  ' --pointer=' ' --color=fg:#cad3f5,header:#ed8796,info:#c6a0f6,pointer:#f4dbd6 --color=bg+:#363a4f,spinner:#f4dbd6,hl:#ed8796 --color=marker:#f4dbd6,fg+:#cad3f5,prompt:#c6a0f6,hl+:#ed8796"
$env.FZF_CTRL_T_COMMAND  = $env.FZF_DEFAULT_COMMAND
$env.FZF_CTRL_T_OPTS     = "--border-label='  Files' --prompt='  ' --preview='bat --color=always --style=header,grid {}' --bind 'ctrl-u:preview-half-page-up' --bind 'ctrl-d:preview-half-page-down' --bind 'ctrl-y:execute-silent(printf {} | cut -f 2- | wl-copy --trim-newline)'"
$env.FZF_CTRL_R_OPTS     = "--border-label='  History' --prompt='  '"

## Others
$env.GIBO_BOILERPLATES = ($env.XDG_DATA_HOME   | path join "gibo")
$env.CURL_HOME         = ($env.XDG_CONFIG_HOME | path join "curl")
$env.W3M_DIR           = ($env.XDG_CONFIG_HOME | path join "w3m")
